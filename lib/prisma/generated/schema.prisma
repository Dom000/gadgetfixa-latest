generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String    @id @default(cuid())
  fullName         String?   @map("full_name")
  avatarUrl        String?   @map("avatar_url")
  phone            String?
  email            String?   @unique
  password         String?
  emailVerified    Boolean   @default(false) @map("email_verified")
  role             Json?     @default("[\"user\"]")
  banned           Boolean?  @default(false)
  banReason        String?   @map("ban_reason")
  banExpires       DateTime? @map("ban_expires")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  accounts         Account[]
  sessions         Session[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  inboxes          Inbox[]
  image            String?
  data             Json?

  bussinesses Bussiness[]

  @@map("profiles")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  type                  String    @default("credentials") @map("type")
  idToken               String?   @map("id_token")
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  token          String   @unique
  expiresAt      DateTime @map("expires_at")
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  impersonatedBy String?  @map("impersonated_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verifications")
}

model Bussiness {
  id          String      @id @default(cuid())
  name        String
  occupation  String
  description String
  categories  Category[]
  portfolios  Portfolio[]
  reviews     Review[]
  address     String
  phone       String
  email       String
  website     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  Profile     Profile?    @relation(fields: [profileId], references: [id])
  profileId   String?

  @@map("businesses")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  bussinessId String?
  Bussiness   Bussiness? @relation(fields: [bussinessId], references: [id])

  @@map("categories")
}

model Portfolio {
  id          String    @id @default(cuid())
  bussinessId String    @map("bussiness_id")
  title       String
  description String
  imageUrl    String    @map("image_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Bussiness   Bussiness @relation(fields: [bussinessId], references: [id])

  @@map("portfolios")
}

model Review {
  id            String    @id @default(cuid())
  userId        String?   @map("user_id")
  anonymous     Boolean   @default(false)
  anonymousName String?   @map("anonymous_name")
  bussinessId   String    @map("bussiness_id")
  rating        Int
  comment       String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  Bussiness     Bussiness @relation(fields: [bussinessId], references: [id])

  @@map("reviews")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  sender   Profile @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver Profile @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Inbox {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  subject   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inboxes")
}
